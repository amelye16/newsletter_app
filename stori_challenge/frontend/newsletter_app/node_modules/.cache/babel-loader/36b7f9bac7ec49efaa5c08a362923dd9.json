{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\L03028948\\\\Documents\\\\Documentos Idalia\\\\Stori Challenge\\\\Frontend\\\\newsletter_app\\\\src\\\\contexts\\\\newsletterContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from \"react\";\nimport NewsletterReducer from \"../reducer/NewsletterReducer\";\nimport { GET_NEWSLETTERS, ADD_NEWSLETTER } from \"../const/actionTypes\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NewsletterContext = /*#__PURE__*/createContext();\nexport const NewsletterContextProvider = props => {\n  _s();\n  const inicialState = {\n    newsletterList: [],\n    currentData: {\n      timestamp: \"\",\n      message: \"\",\n      details: \"\",\n      objectInsert: {\n        newsletterId: 0,\n        newsletterTypeId: 0,\n        newsletterName: \"\",\n        newsletterDescription: \"\",\n        newsletterAttach: \"\",\n        sentDate: null,\n        sentEstatus: 0,\n        creationDate: \"\"\n      }\n    }\n  };\n\n  //use reducer pra editar, crear eliminar, etc\n  //dispathc método logado al state y que nos, es mediante ese método que indicaremos las acciones a realizar\n  //para que realice el cambio en el valor del estado\n  const [state, dispatch] = useReducer(NewsletterReducer, inicialState);\n\n  //obtener todos los rows\n\n  const getNewsletters = async () => {\n    try {\n      const result = await Axios.get(\"/newsletter\");\n      console.log(\"result \" + result);\n      console.log(\"result.data \" + result.data);\n      dispatch({\n        type: GET_NEWSLETTERS,\n        //que tipo es\n        payload: result.data //que o cual es el valor que necesitamos modificar en el state\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const addNewsletter = async newsletter => {\n    try {\n      const result2 = await Axios.post(\"/newsletter\", newsletter);\n      console.log(\"result \" + result2);\n      console.log(\"result.data \" + result2.data);\n      dispatch({\n        type: ADD_NEWSLETTER,\n        //que tipo es\n        payload: result2.data //que o cual es el valor que necesitamos modificar en el state\n      });\n\n      console.log(state.currentData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //el estado que queremos compartir\n\n  return /*#__PURE__*/_jsxDEV(NewsletterContext.Provider, {\n    value: {\n      currentData: state.currentData,\n      newsletterList: state.newsletterList,\n      getNewsletters,\n      addNewsletter\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(NewsletterContextProvider, \"6+r947IF8xxgMRtOjonieh8uxGc=\");\n_c = NewsletterContextProvider;\nvar _c;\n$RefreshReg$(_c, \"NewsletterContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","NewsletterReducer","GET_NEWSLETTERS","ADD_NEWSLETTER","Axios","NewsletterContext","NewsletterContextProvider","props","inicialState","newsletterList","currentData","timestamp","message","details","objectInsert","newsletterId","newsletterTypeId","newsletterName","newsletterDescription","newsletterAttach","sentDate","sentEstatus","creationDate","state","dispatch","getNewsletters","result","get","console","log","data","type","payload","error","addNewsletter","newsletter","result2","post","children"],"sources":["C:/Users/L03028948/Documents/Documentos Idalia/Stori Challenge/Frontend/newsletter_app/src/contexts/newsletterContext.js"],"sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\nimport NewsletterReducer from \"../reducer/NewsletterReducer\";\r\nimport { GET_NEWSLETTERS, ADD_NEWSLETTER } from \"../const/actionTypes\";\r\nimport Axios from \"axios\";\r\n\r\nexport const NewsletterContext = createContext();\r\n\r\nexport const NewsletterContextProvider = (props) => {\r\n  const inicialState = {\r\n    newsletterList: [],\r\n    currentData:{      \r\n    timestamp: \"\",\r\n    message: \"\",\r\n    details: \"\",\r\n    objectInsert: {\r\n        newsletterId: 0,\r\n        newsletterTypeId: 0,\r\n        newsletterName: \"\",\r\n        newsletterDescription: \"\",\r\n        newsletterAttach: \"\",\r\n        sentDate: null,\r\n        sentEstatus: 0,\r\n        creationDate: \"\"\r\n    }\r\n    }\r\n\r\n  };\r\n\r\n  //use reducer pra editar, crear eliminar, etc\r\n  //dispathc método logado al state y que nos, es mediante ese método que indicaremos las acciones a realizar\r\n  //para que realice el cambio en el valor del estado\r\n  const [state, dispatch] = useReducer(NewsletterReducer, inicialState);\r\n\r\n  //obtener todos los rows\r\n\r\n  const getNewsletters = async () => {\r\n    try {\r\n      const result = await Axios.get(\"/newsletter\");\r\n      console.log(\"result \" + result);\r\n      console.log(\"result.data \" + result.data);\r\n\r\n      dispatch({\r\n        type: GET_NEWSLETTERS, //que tipo es\r\n        payload: result.data //que o cual es el valor que necesitamos modificar en el state\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const addNewsletter = async(newsletter) => {\r\n\r\n    try{\r\n        const result2 = await Axios.post(\"/newsletter\",newsletter);\r\n\r\n        console.log(\"result \" + result2);\r\n        console.log(\"result.data \" + result2.data);\r\n\r\n        dispatch({\r\n            type: ADD_NEWSLETTER, //que tipo es\r\n            payload: result2.data //que o cual es el valor que necesitamos modificar en el state\r\n          });\r\n\r\n          console.log(state.currentData);\r\n         \r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n    \r\n  };\r\n\r\n  //el estado que queremos compartir\r\n  \r\n  return (\r\n    <NewsletterContext.Provider\r\n      value={{\r\n        currentData:state.currentData,\r\n        newsletterList: state.newsletterList,\r\n        \r\n\r\n        getNewsletters,\r\n        addNewsletter,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </NewsletterContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,SAASC,eAAe,EAAEC,cAAc,QAAQ,sBAAsB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,OAAO,MAAMC,iBAAiB,gBAAGN,aAAa,EAAE;AAEhD,OAAO,MAAMO,yBAAyB,GAAIC,KAAK,IAAK;EAAA;EAClD,MAAMC,YAAY,GAAG;IACnBC,cAAc,EAAE,EAAE;IAClBC,WAAW,EAAC;MACZC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE;QACVC,YAAY,EAAE,CAAC;QACfC,gBAAgB,EAAE,CAAC;QACnBC,cAAc,EAAE,EAAE;QAClBC,qBAAqB,EAAE,EAAE;QACzBC,gBAAgB,EAAE,EAAE;QACpBC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE,CAAC;QACdC,YAAY,EAAE;MAClB;IACA;EAEF,CAAC;;EAED;EACA;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,UAAU,CAACC,iBAAiB,EAAEO,YAAY,CAAC;;EAErE;;EAEA,MAAMiB,cAAc,GAAG,YAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAAC,aAAa,CAAC;MAC7CC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGH,MAAM,CAAC;MAC/BE,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGH,MAAM,CAACI,IAAI,CAAC;MAEzCN,QAAQ,CAAC;QACPO,IAAI,EAAE7B,eAAe;QAAE;QACvB8B,OAAO,EAAEN,MAAM,CAACI,IAAI,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAMC,UAAU,IAAK;IAEzC,IAAG;MACC,MAAMC,OAAO,GAAG,MAAMhC,KAAK,CAACiC,IAAI,CAAC,aAAa,EAACF,UAAU,CAAC;MAE1DP,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGO,OAAO,CAAC;MAChCR,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGO,OAAO,CAACN,IAAI,CAAC;MAE1CN,QAAQ,CAAC;QACLO,IAAI,EAAE5B,cAAc;QAAE;QACtB6B,OAAO,EAAEI,OAAO,CAACN,IAAI,CAAC;MACxB,CAAC,CAAC;;MAEFF,OAAO,CAACC,GAAG,CAACN,KAAK,CAACb,WAAW,CAAC;IAEpC,CAAC,CACD,OAAMuB,KAAK,EAAC;MACRL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;IACtB;EAEF,CAAC;;EAED;;EAEA,oBACE,QAAC,iBAAiB,CAAC,QAAQ;IACzB,KAAK,EAAE;MACLvB,WAAW,EAACa,KAAK,CAACb,WAAW;MAC7BD,cAAc,EAAEc,KAAK,CAACd,cAAc;MAGpCgB,cAAc;MACdS;IACF,CAAE;IAAA,UAED3B,KAAK,CAAC+B;EAAQ;IAAA;IAAA;IAAA;EAAA,QACY;AAEjC,CAAC;AAAC,GAjFWhC,yBAAyB;AAAA,KAAzBA,yBAAyB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}